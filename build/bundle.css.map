{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Box.svelte",
    "Chart.svelte",
    "Grid.svelte",
    "Point.svelte",
    "Svg.svelte",
    "LayerCake.svelte",
    "Html.svelte",
    "ScaledSvg.svelte",
    "Svg.svelte",
    "App.svelte",
    "Circles.svelte",
    "LineChart.svelte",
    "LineChart.svelte",
    "Annotations.html.svelte",
    "Key.html.svelte",
    "Filler.svelte",
    "Header.svelte",
    "Arrow.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { getChartContext } from './Chart.svelte';\n\n\texport let x1 = 0;\n\texport let x2 = 1;\n\texport let y1 = 0;\n\texport let y2 = 1;\n\n\tconst { x_scale, y_scale } = getChartContext();\n\n\tlet style; $: {\n\t\tconst _x1 = $x_scale(x1);\n\t\tconst _x2 = $x_scale(x2);\n\t\tconst _y1 = $y_scale(y1);\n\t\tconst _y2 = $y_scale(y2);\n\n\t\tconst left   = Math.min(_x1, _x2);\n\t\tconst right  = Math.max(_x1, _x2);\n\t\tconst top    = Math.min(_y1, _y2);\n\t\tconst bottom = Math.max(_y1, _y2);\n\n\t\tconst width = right - left;\n\t\tconst height = bottom - top;\n\n\t\tstyle = `left: ${left}%; bottom: ${100 - bottom}%; width: ${right - left}%; height: ${height}%;`;\n\t};\n</script>\n\n<div class=\"pancake-box\" style={style}>\n\t<slot></slot>\n</div>\n\n<style>\n\t.pancake-box {\n\t\tposition: absolute;\n\t}\n</style>",
    "<script context=\"module\">\n\timport { getContext } from 'svelte';\n\n\tconst key = {};\n\n\texport function getChartContext() {\n\t\treturn getContext(key);\n\t}\n</script>\n\n<script>\n\timport { setContext, onDestroy } from 'svelte';\n\timport { writable, derived } from 'svelte/store';\n\timport * as yootils from 'yootils';\n\n\texport let x1 = 0;\n\texport let y1 = 0;\n\texport let x2 = 1;\n\texport let y2 = 1;\n\texport let clip = false;\n\n\tlet chart;\n\n\tconst _x1 = writable();\n\tconst _y1 = writable();\n\tconst _x2 = writable();\n\tconst _y2 = writable();\n\n\tconst width = writable();\n\tconst height = writable();\n\tconst pointer = writable(null);\n\n\tconst handle_mousemove = e => {\n\t\tconst bcr = chart.getBoundingClientRect();\n\t\tconst left = e.clientX - bcr.left;\n\t\tconst top = e.clientY - bcr.top;\n\n\t\tconst x = $x_scale_inverse(100 * left / (bcr.right - bcr.left));\n\t\tconst y = $y_scale_inverse(100 * top / (bcr.bottom - bcr.top));\n\n\t\tpointer.set({ x, y, left, top });\n\t};\n\n\tconst handle_mouseleave = () => {\n\t\tpointer.set(null);\n\t};\n\n\t$: _x1.set(x1);\n\t$: _y1.set(y1);\n\t$: _x2.set(x2);\n\t$: _y2.set(y2);\n\n\tconst x_scale = derived([_x1, _x2], ([$x1, $x2]) => {\n\t\treturn yootils.linearScale([$x1, $x2], [0, 100]);\n\t});\n\n\tconst y_scale = derived([_y1, _y2], ([$y1, $y2]) => {\n\t\treturn yootils.linearScale([$y1, $y2], [100, 0]);\n\t});\n\n\tconst x_scale_inverse = derived(x_scale, $x_scale => $x_scale.inverse());\n\tconst y_scale_inverse = derived(y_scale, $y_scale => $y_scale.inverse());\n\n\tsetContext(key, {\n\t\tx1: _x1,\n\t\ty1: _y1,\n\t\tx2: _x2,\n\t\ty2: _y2,\n\t\tx_scale,\n\t\ty_scale,\n\t\tx_scale_inverse,\n\t\ty_scale_inverse,\n\t\tpointer,\n\t\twidth,\n\t\theight\n\t});\n</script>\n\n<div\n\tclass=\"pancake-chart\"\n\tbind:this={chart}\n\tbind:clientWidth={$width}\n\tbind:clientHeight={$height}\n\ton:mousemove={handle_mousemove}\n\ton:mouseleave={handle_mouseleave}\n\tclass:clip\n>\n\t<slot></slot>\n</div>\n\n<style>\n\t.pancake-chart {\n\t\tposition: relative;\n\t\tdisplay: block;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n\n\t.clip {\n\t\toverflow: hidden;\n\t}\n</style>",
    "<script>\n\timport { getChartContext } from './Chart.svelte';\n\timport { get_ticks } from '../utils/ticks.mjs';\n\n\texport let count = undefined;\n\texport let ticks = undefined;\n\texport let horizontal = false;\n\texport let vertical = false;\n\n\tconst { x1, y1, x2, y2, x_scale, y_scale } = getChartContext();\n\n\tconst VERTICAL = {};\n\tconst HORIZONTAL = {};\n\n\t$: orientation = vertical ? VERTICAL : HORIZONTAL;\n\n\t$: if (horizontal && vertical) {\n\t\tconsole.error(`<Grid> must specify either 'horizontal' or 'vertical' orientation`);\n\t}\n\n\t$: _ticks = ticks || (orientation === HORIZONTAL\n\t\t? get_ticks($y1, $y2, count)\n\t\t: get_ticks($x1, $x2, count));\n\n\t$: style = orientation === HORIZONTAL\n\t\t? (n, i) => `width: 100%; height: 0; top: ${$y_scale(n, i)}%`\n\t\t: (n, i) => `width: 0; height: 100%; left: ${$x_scale(n, i)}%`;\n</script>\n\n<div class=\"pancake-grid\">\n\t{#each _ticks as tick, i}\n\t\t<div class=\"pancake-grid-item\" style={style(tick, i)}>\n\t\t\t<slot value={tick} first={i === 0} last={i === _ticks.length - 1}></slot>\n\t\t</div>\n\t{/each}\n</div>\n\n<style>\n\t.pancake-grid-item {\n\t\tposition: absolute;\n\t\tleft: 0;\n\t\ttop: 0;\n\t}\n</style>",
    "<script>\n\timport { getChartContext } from './Chart.svelte';\n\n\tconst { x_scale, y_scale } = getChartContext();\n\n\texport let x;\n\texport let y;\n</script>\n\n<div class=\"pancake-point\" style=\"left: {$x_scale(x)}%; top: {$y_scale(y)}%\">\n\t<slot></slot>\n</div>\n\n<style>\n\t.pancake-point {\n\t\tposition: absolute;\n\t\twidth: 0;\n\t\theight: 0;\n\t}\n</style>",
    "<script>\n\texport let clip = false;\n</script>\n\n<svg viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\" class:clip>\n\t<slot></slot>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: visible;\n\t}\n\n\t.clip {\n\t\toverflow: hidden;\n\t}\n\n\tsvg :global(*) {\n\t\tvector-effect: non-scaling-stroke;\n\t}\n</style>\n\n",
    "<!--\n\t@component\n\tLayer Cake component\n -->\n<script>\n\timport { setContext, onMount } from 'svelte';\n\timport { writable, derived } from 'svelte/store';\n\n\timport makeAccessor from './utils/makeAccessor.js';\n\timport filterObject from './utils/filterObject.js';\n\timport debounce from './utils/debounce.js';\n\n\timport calcScaleExtents from './helpers/calcScaleExtents.js';\n\timport calcDomain from './helpers/calcDomain.js';\n\timport createScale from './helpers/createScale.js';\n\timport createGetter from './helpers/createGetter.js';\n\timport getRange from './helpers/getRange.js';\n\timport printDebug from './helpers/printDebug.js';\n\n\timport defaultScales from './settings/defaultScales.js';\n\n\tconst printDebug_debounced = debounce(printDebug, 200);\n\n\t/** @type {Boolean} [ssr=false] Whether this chart should be rendered server side. */\n\texport let ssr = false;\n\t/** @type {Boolean} [pointerEvents=true] Whether to allow pointer events via CSS. Set this to `false` to set `pointer-events: none;` on all components, disabling all mouse interaction. */\n\texport let pointerEvents = true;\n\t/** @type {String} [position='relative'] Determine the positioning of the wrapper div. Set this to `'absolute'` when you want to stack cakes. */\n\texport let position = 'relative';\n\t/** @type {Boolean} [percentRange=false] If `true`, set all scale ranges to `[0, 100]`. Ranges reversed via `xReverse`, `yReverse`, `zReverse` or `rReverse` props will continue to be reversed as usual. */\n\texport let percentRange = false;\n\n\t/** @type {Number} [width=containerWidth] Override the automated width. */\n\texport let width = undefined;\n\t/** @type {Number} [height=containerHeight] Override the automated height. */\n\texport let height = undefined;\n\n\t/** @type {Number} [containerWidth=100] The bound container width. */\n\texport let containerWidth = width || 100;\n\t/** @type {Number} [containerHeight=100] The bound container height. */\n\texport let containerHeight = height || 100;\n\n\t/**\t@type {Element} [element] The .layercake-container `<div>` tag. Useful for bindings. */\n\texport let element = undefined;\n\n\t/* --------------------------------------------\n\t * Parameters\n\t * Values that computed properties are based on and that\n\t * can be easily extended from config values\n\t *\n\t */\n\n\t/** @type {String|Function|Number|Array} x The x accessor. The key in each row of data that corresponds to the x-field. This can be a string, an accessor function, a number or an array of any combination of those types. This property gets converted to a function when you access it through the context. */\n\texport let x = undefined;\n\t/** @type {String|Function|Number|Array} y The y accessor. The key in each row of data that corresponds to the y-field. This can be a string, an accessor function, a number or an array of any combination of those types. This property gets converted to a function when you access it through the context. */\n\texport let y = undefined;\n\t/** @type {String|Function|Number|Array} z The z accessor. The key in each row of data that corresponds to the z-field. This can be a string, an accessor function, a number or an array of any combination of those types. This property gets converted to a function when you access it through the context. */\n\texport let z = undefined;\n\t/** @type {String|Function|Number|Array} r The r accessor. The key in each row of data that corresponds to the r-field. This can be a string, an accessor function, a number or an array of any combination of those types. This property gets converted to a function when you access it through the context. */\n\texport let r = undefined;\n\n\t/** @type {Array|Object} [data=[]] If `data` is not a flat array of objects and you want to use any of the scales, set a flat version of the data via the `flatData` prop. */\n\texport let data = [];\n\n\t/** @type {[min: Number|null, max: Number|null]|String[]|Number[]|Function} [xDomain] Set a min or max. For linear scales, if you want to inherit the value from the data's extent, set that value to `null`. This value can also be an array because sometimes your scales are [piecewise](https://github.com/d3/d3-scale#continuous_domain) or are a list of discrete values such as in [ordinal scales](https://github.com/d3/d3-scale#ordinal-scales), useful for color series. Set it to a function that receives the computed domain and lets you return a modified domain, useful for sorting values. */\n\texport let xDomain = undefined;\n\t/** @type {[min: Number|null, max: Number|null]|String[]|Number[]|Function} [yDomain] Set a min or max. For linear scales, if you want to inherit the value from the data's extent, set that value to `null`.  Set it to a function that receives the computed domain and lets you return a modified domain, useful for sorting values. */\n\texport let yDomain = undefined;\n\t/** @type {[min: Number|null, max: Number|null]|String[]|Number[]|Function} [zDomain] Set a min or max. For linear scales, if you want to inherit the value from the data's extent, set that value to `null`. This value can also be an array because sometimes your scales are [piecewise](https://github.com/d3/d3-scale#continuous_domain) or are a list of discrete values such as in [ordinal scales](https://github.com/d3/d3-scale#ordinal-scales), useful for color series. Set it to a function that receives the computed domain and lets you return a modified domain, useful for sorting values. */\n\texport let zDomain = undefined;\n\t/** @type {[min: Number|null, max: Number|null]|String[]|Number[]|Function} [rDomain] Set a min or max. For linear scales, if you want to inherit the value from the data's extent, set that value to `null`. This value can also be an array because sometimes your scales are [piecewise](https://github.com/d3/d3-scale#continuous_domain) or are a list of discrete values such as in [ordinal scales](https://github.com/d3/d3-scale#ordinal-scales), useful for color series. Set it to a function that receives the computed domain and lets you return a modified domain, useful for sorting values. */\n\texport let rDomain = undefined;\n\t/** @type {Boolean|Number} [xNice=false] Applies D3's [scale.nice()](https://github.com/d3/d3-scale#continuous_nice) to the x domain. */\n\texport let xNice = false;\n\t/** @type {Boolean|Number} [yNice=false] Applies D3's [scale.nice()](https://github.com/d3/d3-scale#continuous_nice) to the y domain. */\n\texport let yNice = false;\n\t/** @type {Boolean|Number} [zNice=false] Applies D3's [scale.nice()](https://github.com/d3/d3-scale#continuous_nice) to the z domain. */\n\texport let zNice = false;\n\t/** @type {Boolean} [rNice=false] Applies D3's [scale.nice()](https://github.com/d3/d3-scale#continuous_nice) to the r domain. */\n\texport let rNice = false;\n\t/** @type {[leftPixels: Number, rightPixels: Number]} [xPadding] Assign a pixel value to add to the min or max of the scale. This will increase the scales domain by the scale unit equivalent of the provided pixels. */\n\texport let xPadding = undefined;\n\t/** @type {[leftPixels: Number, rightPixels: Number]} [yPadding] Assign a pixel value to add to the min or max of the scale. This will increase the scales domain by the scale unit equivalent of the provided pixels. */\n\texport let yPadding = undefined;\n\t/** @type {[leftPixels: Number, rightPixels: Number]} [zPadding] Assign a pixel value to add to the min or max of the scale. This will increase the scales domain by the scale unit equivalent of the provided pixels. */\n\texport let zPadding = undefined;\n\t/** @type {[leftPixels: Number, rightPixels: Number]} [rPadding] Assign a pixel value to add to the min or max of the scale. This will increase the scales domain by the scale unit equivalent of the provided pixels. */\n\texport let rPadding = undefined;\n\t/** @type {Function} [xScale=d3.scaleLinear] The D3 scale that should be used for the x-dimension. Pass in an instantiated D3 scale if you want to override the default or you want to extra options. */\n\texport let xScale = defaultScales.x;\n\t/** @type {Function} [yScale=d3.scaleLinear] The D3 scale that should be used for the x-dimension. Pass in an instantiated D3 scale if you want to override the default or you want to extra options. */\n\texport let yScale = defaultScales.y;\n\t/** @type {Function} [zScale=d3.scaleLinear] The D3 scale that should be used for the x-dimension. Pass in an instantiated D3 scale if you want to override the default or you want to extra options. */\n\texport let zScale = defaultScales.z;\n\t/** @type {Function} [rScale=d3.scaleSqrt] The D3 scale that should be used for the x-dimension. Pass in an instantiated D3 scale if you want to override the default or you want to extra options. */\n\texport let rScale = defaultScales.r;\n\t/** @type {[min: Number, max: Number]|Function|String[]|Number[]} [xRange] Override the default x range of `[0, width]` by setting an array or function with argument `({ width, height})` that returns an array. Setting this prop overrides `xReverse`. This can also be a list of numbers or strings for scales with discrete ranges like [scaleThreshhold](https://github.com/d3/d3-scale#threshold-scales) or [scaleQuantize](https://github.com/d3/d3-scale#quantize-scales). */\n\texport let xRange = undefined;\n\t/** @type {[min: Number, max: Number]|Function|String[]|Number[]} [xRange] Override the default y range of `[0, height]` by setting an array or function with argument `({ width, height})` that returns an array. Setting this prop overrides `yReverse`. This can also be a list of numbers or strings for scales with discrete ranges like [scaleThreshhold](https://github.com/d3/d3-scale#threshold-scales) or [scaleQuantize](https://github.com/d3/d3-scale#quantize-scales). */\n\texport let yRange = undefined;\n\t/** @type {[min: Number, max: Number]|Function|String[]|Number[]} [zRange] Override the default z range of `[0, width]` by setting an array or function with argument `({ width, height})` that returns an array. Setting this prop overrides `zReverse`. This can also be a list of numbers or strings for scales with discrete ranges like [scaleThreshhold](https://github.com/d3/d3-scale#threshold-scales) or [scaleQuantize](https://github.com/d3/d3-scale#quantize-scales). */\n\texport let zRange = undefined;\n\t/** @type {[min: Number, max: Number]|Function|String[]|Number[]} [rRange] Override the default r range of `[1, 25]` by setting an array or function with argument `({ width, height})` that returns an array. Setting this prop overrides `rReverse`. This can also be a list of numbers or strings for scales with discrete ranges like [scaleThreshhold](https://github.com/d3/d3-scale#threshold-scales) or [scaleQuantize](https://github.com/d3/d3-scale#quantize-scales). */\n\texport let rRange = undefined;\n\t/** @type {Boolean} [xReverse=false] Reverse the default x range. By default this is `false` and the range is `[0, width]`. Ignored if you set the xRange prop. */\n\texport let xReverse = false;\n\t/** @type {Boolean} [yReverse=true] Reverse the default y range. By default this is `true` and the range is `[height, 0]` unless using an ordinal scale with a `.bandwidth` method for `yScale`. Ignored if you set the `yRange` prop. */\n\texport let yReverse = undefined\n\t/** @type {Boolean} [zReverse=false] Reverse the default z range. By default this is `false` and the range is `[0, width]`. Ignored if you set the zRange prop. */\n\texport let zReverse = false;\n\t/** @type {Boolean} [rReverse=false] Reverse the default r range. By default this is `false` and the range is `[1, 25]`. Ignored if you set the rRange prop. */\n\texport let rReverse = false;\n\t/** @type {Boolean} [xDomainSort=true] Only used when scale is ordinal. Set whether the calculated unique items come back sorted. */\n\texport let xDomainSort = true;\n\t/** @type {Boolean} [yDomainSort=true] Only used when scale is ordinal. Set whether the calculated unique items come back sorted. */\n\texport let yDomainSort = true\n\t/** @type {Boolean} [zDomainSort=true] Only used when scale is ordinal. Set whether the calculated unique items come back sorted. */\n\texport let zDomainSort = true;\n\t/** @type {Boolean} [rDomainSort=true] Only used when scale is ordinal. Set whether the calculated unique items come back sorted. */\n\texport let rDomainSort = true;\n\t/** @type {{top?: Number, right?: Number, bottom?: Number, left?: Number}} [padding={}] The amount of padding to put around your chart. It operates like CSS box-sizing: border-box; where values are subtracted from the parent container's width and height, the same as a [D3 margin convention](https://bl.ocks.org/mbostock/3019563). */\n\texport let padding = {};\n\t/** @type {{ x?: [min: Number, max: Number], y?: [min: Number, max: Number], r?: [min: Number, max: Number], z?: [min: Number, max: Number] }} [extents] Manually set the extents of the x, y or r scale as a two-dimensional array of the min and max you want. Setting values here will skip any dynamic extent calculation of the data for that dimension. */\n\texport let extents = {};\n\n\t/** @type {Array} [flatData=data] A flat version of data. */\n\texport let flatData = undefined;\n\n\t/** @type {Object} custom Any extra configuration values you want available on the LayerCake context. This could be useful for color lookups or additional constants. */\n\texport let custom = {};\n\n\t/** @type {Boolean} debug Enable debug printing to the console. Useful to inspect your scales and dimensions. */\n\texport let debug = false;\n\n\t/**\n\t * Make this reactive\n\t */\n\t$: yReverseValue = typeof yReverse === 'undefined'\n\t\t? typeof yScale.bandwidth === 'function' ? false : true\n\t\t: yReverse;\n\n\t/* --------------------------------------------\n\t * Keep track of whether the component has mounted\n\t * This is used to emit warnings once we have measured\n\t * the container object and it doesn't have proper dimensions\n\t */\n\tlet isMounted = false;\n\tonMount(() => {\n\t\tisMounted = true;\n\t});\n\n\t/* --------------------------------------------\n\t * Preserve a copy of our passed in settings before we modify them\n\t * Return this to the user's context so they can reference things if need be\n\t * Add the active keys since those aren't on our settings object.\n\t * This is mostly an escape-hatch\n\t */\n\tconst config = {};\n\t$: if (x) config.x = x;\n\t$: if (y) config.y = y;\n\t$: if (z) config.z = z;\n\t$: if (r) config.r = r;\n\t$: if (xDomain) config.xDomain = xDomain;\n\t$: if (yDomain) config.yDomain = yDomain;\n\t$: if (zDomain) config.zDomain = zDomain;\n\t$: if (rDomain) config.rDomain = rDomain;\n\t$: if (xRange) config.xRange = xRange;\n\t$: if (yRange) config.yRange = yRange;\n\t$: if (zRange) config.zRange = zRange;\n\t$: if (rRange) config.rRange = rRange;\n\n\t/* --------------------------------------------\n\t * Make store versions of each parameter\n\t * Prefix these with `_` to keep things organized\n\t */\n\tconst _percentRange = writable(percentRange);\n\tconst _containerWidth = writable(containerWidth);\n\tconst _containerHeight = writable(containerHeight);\n\tconst _extents = writable(filterObject(extents));\n\tconst _data = writable(data);\n\tconst _flatData = writable(flatData || data);\n\tconst _padding = writable(padding);\n\tconst _x = writable(makeAccessor(x));\n\tconst _y = writable(makeAccessor(y));\n\tconst _z = writable(makeAccessor(z));\n\tconst _r = writable(makeAccessor(r));\n\tconst _xDomain = writable(xDomain);\n\tconst _yDomain = writable(yDomain);\n\tconst _zDomain = writable(zDomain);\n\tconst _rDomain = writable(rDomain);\n\tconst _xNice = writable(xNice);\n\tconst _yNice = writable(yNice);\n\tconst _zNice = writable(zNice);\n\tconst _rNice = writable(rNice);\n\tconst _xReverse = writable(xReverse);\n\tconst _yReverse = writable(yReverseValue);\n\tconst _zReverse = writable(zReverse);\n\tconst _rReverse = writable(rReverse);\n\tconst _xPadding = writable(xPadding);\n\tconst _yPadding = writable(yPadding);\n\tconst _zPadding = writable(zPadding);\n\tconst _rPadding = writable(rPadding);\n\tconst _xRange = writable(xRange);\n\tconst _yRange = writable(yRange);\n\tconst _zRange = writable(zRange);\n\tconst _rRange = writable(rRange);\n\tconst _xScale = writable(xScale);\n\tconst _yScale = writable(yScale);\n\tconst _zScale = writable(zScale);\n\tconst _rScale = writable(rScale);\n\tconst _xDomainSort = writable(xDomainSort);\n\tconst _yDomainSort = writable(yDomainSort);\n\tconst _zDomainSort = writable(zDomainSort);\n\tconst _rDomainSort = writable(rDomainSort);\n\tconst _config = writable(config);\n\tconst _custom = writable(custom);\n\n\t$: $_percentRange = percentRange;\n\t$: $_containerWidth = containerWidth;\n\t$: $_containerHeight = containerHeight;\n\t$: $_extents = filterObject(extents);\n\t$: $_data = data;\n\t$: $_flatData = flatData || data;\n\t$: $_padding = padding;\n\t$: $_x = makeAccessor(x);\n\t$: $_y = makeAccessor(y);\n\t$: $_z = makeAccessor(z);\n\t$: $_r = makeAccessor(r);\n\t$: $_xDomain = xDomain;\n\t$: $_yDomain = yDomain;\n\t$: $_zDomain = zDomain;\n\t$: $_rDomain = rDomain;\n\t$: $_xNice = xNice;\n\t$: $_yNice = yNice;\n\t$: $_zNice = zNice;\n\t$: $_rNice = rNice;\n\t$: $_xReverse = xReverse;\n\t$: $_yReverse = yReverseValue;\n\t$: $_zReverse = zReverse;\n\t$: $_rReverse = rReverse;\n\t$: $_xPadding = xPadding;\n\t$: $_yPadding = yPadding;\n\t$: $_zPadding = zPadding;\n\t$: $_rPadding = rPadding;\n\t$: $_xRange = xRange;\n\t$: $_yRange = yRange;\n\t$: $_zRange = zRange;\n\t$: $_rRange = rRange;\n\t$: $_xScale = xScale;\n\t$: $_yScale = yScale;\n\t$: $_zScale = zScale;\n\t$: $_rScale = rScale;\n\t$: $_custom = custom;\n\t$: $_config = config;\n\n\t/* --------------------------------------------\n\t * Create derived values\n\t * Suffix these with `_d`\n\t */\n\tconst activeGetters_d = derived([_x, _y, _z, _r], ([$x, $y, $z, $r]) => {\n\t\tconst obj = {};\n\t\tif ($x) {\n\t\t\tobj.x = $x;\n\t\t}\n\t\tif ($y) {\n\t\t\tobj.y = $y;\n\t\t}\n\t\tif ($z) {\n\t\t\tobj.z = $z;\n\t\t}\n\t\tif ($r) {\n\t\t\tobj.r = $r;\n\t\t}\n\t\treturn obj;\n\t});\n\n\tconst padding_d = derived([_padding, _containerWidth, _containerHeight], ([$padding]) => {\n\t\tconst defaultPadding = { top: 0, right: 0, bottom: 0, left: 0 };\n\t\treturn Object.assign(defaultPadding, $padding);\n\t});\n\n\tconst box_d = derived(\n\t\t[_containerWidth, _containerHeight, padding_d],\n\t\t([$containerWidth, $containerHeight, $padding]) => {\n\t\t\tconst b = {};\n\t\t\tb.top = $padding.top;\n\t\t\tb.right = $containerWidth - $padding.right;\n\t\t\tb.bottom = $containerHeight - $padding.bottom;\n\t\t\tb.left = $padding.left;\n\t\t\tb.width = b.right - b.left;\n\t\t\tb.height = b.bottom - b.top;\n\t\t\tif (b.width <= 0 && isMounted === true) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'[LayerCake] Target div has zero or negative width. Did you forget to set an explicit width in CSS on the container?'\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (b.height <= 0 && isMounted === true) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'[LayerCake] Target div has zero or negative height. Did you forget to set an explicit height in CSS on the container?'\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn b;\n\t\t}\n\t);\n\n\tconst width_d = derived([box_d], ([$box]) => {\n\t\treturn $box.width;\n\t});\n\n\tconst height_d = derived([box_d], ([$box]) => {\n\t\treturn $box.height;\n\t});\n\n\t/* --------------------------------------------\n\t * Calculate extents by taking the extent of the data\n\t * and filling that in with anything set by the user\n\t * Note that this is different from an \"extent\" passed\n\t * in as a domain, which can be a partial domain\n\t */\n\tconst extents_d = derived(\n\t\t[_flatData, activeGetters_d, _extents, _xScale, _yScale, _rScale, _zScale, _xDomainSort, _yDomainSort, _zDomainSort, _rDomainSort],\n\t\t([$flatData, $activeGetters, $extents, $_xScale, $_yScale, $_rScale, $_zScale, $_xDomainSort, $_yDomainSort, $_zDomainSort, $_rDomainSort]) => {\n\t\t\tconst scaleLookup = {\n\t\t\t\tx: { scale: $_xScale, sort: $_xDomainSort },\n\t\t\t\ty: { scale: $_yScale, sort: $_yDomainSort },\n\t\t\t\tr: { scale: $_rScale, sort: $_rDomainSort },\n\t\t\t\tz: { scale: $_zScale, sort: $_zDomainSort }\n\t\t\t};\n\t\t\tconst getters = filterObject($activeGetters, $extents);\n\t\t\tconst activeScales = Object.fromEntries(Object.keys(getters).map((k) => [k, scaleLookup[k]]));\n\n\t\t\tif (Object.keys(getters).length > 0) {\n\t\t\t\tconst calculatedExtents = calcScaleExtents($flatData, getters, activeScales);\n\t\t\t\treturn { ...calculatedExtents, ...$extents };\n\t\t\t} else {\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t);\n\n\tconst xDomain_d = derived([extents_d, _xDomain], calcDomain('x'));\n\tconst yDomain_d = derived([extents_d, _yDomain], calcDomain('y'));\n\tconst zDomain_d = derived([extents_d, _zDomain], calcDomain('z'));\n\tconst rDomain_d = derived([extents_d, _rDomain], calcDomain('r'));\n\n\tconst xScale_d = derived(\n\t\t[\n\t\t\t_xScale,\n\t\t\textents_d,\n\t\t\txDomain_d,\n\t\t\t_xPadding,\n\t\t\t_xNice,\n\t\t\t_xReverse,\n\t\t\twidth_d,\n\t\t\theight_d,\n\t\t\t_xRange,\n\t\t\t_percentRange\n\t\t],\n\t\tcreateScale('x')\n\t);\n\tconst xGet_d = derived([_x, xScale_d], createGetter);\n\n\tconst yScale_d = derived(\n\t\t[\n\t\t\t_yScale,\n\t\t\textents_d,\n\t\t\tyDomain_d,\n\t\t\t_yPadding,\n\t\t\t_yNice,\n\t\t\t_yReverse,\n\t\t\twidth_d,\n\t\t\theight_d,\n\t\t\t_yRange,\n\t\t\t_percentRange\n\t\t],\n\t\tcreateScale('y')\n\t);\n\tconst yGet_d = derived([_y, yScale_d], createGetter);\n\n\tconst zScale_d = derived(\n\t\t[\n\t\t\t_zScale,\n\t\t\textents_d,\n\t\t\tzDomain_d,\n\t\t\t_zPadding,\n\t\t\t_zNice,\n\t\t\t_zReverse,\n\t\t\twidth_d,\n\t\t\theight_d,\n\t\t\t_zRange,\n\t\t\t_percentRange\n\t\t],\n\t\tcreateScale('z')\n\t);\n\tconst zGet_d = derived([_z, zScale_d], createGetter);\n\n\tconst rScale_d = derived(\n\t\t[\n\t\t\t_rScale,\n\t\t\textents_d,\n\t\t\trDomain_d,\n\t\t\t_rPadding,\n\t\t\t_rNice,\n\t\t\t_rReverse,\n\t\t\twidth_d,\n\t\t\theight_d,\n\t\t\t_rRange,\n\t\t\t_percentRange\n\t\t],\n\t\tcreateScale('r')\n\t);\n\tconst rGet_d = derived([_r, rScale_d], createGetter);\n\n\tconst xRange_d = derived([xScale_d], getRange);\n\tconst yRange_d = derived([yScale_d], getRange);\n\tconst zRange_d = derived([zScale_d], getRange);\n\tconst rRange_d = derived([rScale_d], getRange);\n\n\tconst aspectRatio_d = derived([width_d, height_d], ([$width, $height]) => {\n\t\treturn $width / $height;\n\t});\n\n\t$: context = {\n\t\tactiveGetters: activeGetters_d,\n\t\twidth: width_d,\n\t\theight: height_d,\n\t\tpercentRange: _percentRange,\n\t\taspectRatio: aspectRatio_d,\n\t\tcontainerWidth: _containerWidth,\n\t\tcontainerHeight: _containerHeight,\n\t\tx: _x,\n\t\ty: _y,\n\t\tz: _z,\n\t\tr: _r,\n\t\tcustom: _custom,\n\t\tdata: _data,\n\t\txNice: _xNice,\n\t\tyNice: _yNice,\n\t\tzNice: _zNice,\n\t\trNice: _rNice,\n\t\txDomainSort: _xDomainSort,\n\t\tyDomainSort: _yDomainSort,\n\t\tzDomainSort: _zDomainSort,\n\t\trDomainSort: _rDomainSort,\n\t\txReverse: _xReverse,\n\t\tyReverse: _yReverse,\n\t\tzReverse: _zReverse,\n\t\trReverse: _rReverse,\n\t\txPadding: _xPadding,\n\t\tyPadding: _yPadding,\n\t\tzPadding: _zPadding,\n\t\trPadding: _rPadding,\n\t\tpadding: padding_d,\n\t\tflatData: _flatData,\n\t\textents: extents_d,\n\t\txDomain: xDomain_d,\n\t\tyDomain: yDomain_d,\n\t\tzDomain: zDomain_d,\n\t\trDomain: rDomain_d,\n\t\txRange: xRange_d,\n\t\tyRange: yRange_d,\n\t\tzRange: zRange_d,\n\t\trRange: rRange_d,\n\t\tconfig: _config,\n\t\txScale: xScale_d,\n\t\txGet: xGet_d,\n\t\tyScale: yScale_d,\n\t\tyGet: yGet_d,\n\t\tzScale: zScale_d,\n\t\tzGet: zGet_d,\n\t\trScale: rScale_d,\n\t\trGet: rGet_d\n\t};\n\n\t$: setContext('LayerCake', context);\n\n\t$: if ($box_d && debug === true && (ssr === true || typeof window !== 'undefined')) {\n\t\t// Call this as a debounce so that it doesn't get called multiple times as these vars get filled in\n\t\tprintDebug_debounced({\n\t\t\tdata: $_data,\n\t\t\tflatData: typeof flatData !== 'undefined' ? $_flatData : null,\n\t\t\tboundingBox: $box_d,\n\t\t\tactiveGetters: $activeGetters_d,\n\t\t\tx: config.x,\n\t\t\ty: config.y,\n\t\t\tz: config.z,\n\t\t\tr: config.r,\n\t\t\txScale: $xScale_d,\n\t\t\tyScale: $yScale_d,\n\t\t\tzScale: $zScale_d,\n\t\t\trScale: $rScale_d,\n\t\t});\n\t}\n</script>\n\n{#if ssr === true || typeof window !== 'undefined'}\n\t<div\n\t\tbind:this={element}\n\t\tclass=\"layercake-container\"\n\t\tstyle:position\n\t\tstyle:top={position === 'absolute' ? '0' : null}\n\t\tstyle:right={position === 'absolute' ? '0' : null}\n\t\tstyle:bottom={position === 'absolute' ? '0' : null}\n\t\tstyle:left={position === 'absolute' ? '0' : null}\n\t\tstyle:pointer-events={pointerEvents === false ? 'none' : null}\n\t\tbind:clientWidth={containerWidth}\n\t\tbind:clientHeight={containerHeight}\n\t>\n\t\t<slot\n\t\t\t{element}\n\t\t\twidth={$width_d}\n\t\t\theight={$height_d}\n\t\t\taspectRatio={$aspectRatio_d}\n\t\t\tcontainerWidth={$_containerWidth}\n\t\t\tcontainerHeight={$_containerHeight}\n\t\t\tactiveGetters={$activeGetters_d}\n\t\t\tpercentRange={$_percentRange}\n\t\t\tx={$_x}\n\t\t\ty={$_y}\n\t\t\tz={$_z}\n\t\t\tr={$_r}\n\t\t\tcustom={$_custom}\n\t\t\tdata={$_data}\n\t\t\txNice={$_xNice}\n\t\t\tyNice={$_yNice}\n\t\t\tzNice={$_zNice}\n\t\t\trNice={$_rNice}\n\t\t\txDomainSort={$_xDomainSort}\n\t\t\tyDomainSort={$_yDomainSort}\n\t\t\tzDomainSort={$_zDomainSort}\n\t\t\trDomainSort={$_rDomainSort}\n\t\t\txReverse={$_xReverse}\n\t\t\tyReverse={$_yReverse}\n\t\t\tzReverse={$_zReverse}\n\t\t\trReverse={$_rReverse}\n\t\t\txPadding={$_xPadding}\n\t\t\tyPadding={$_yPadding}\n\t\t\tzPadding={$_zPadding}\n\t\t\trPadding={$_rPadding}\n\t\t\tpadding={$padding_d}\n\t\t\tflatData={$_flatData}\n\t\t\textents={$extents_d}\n\t\t\txDomain={$xDomain_d}\n\t\t\tyDomain={$yDomain_d}\n\t\t\tzDomain={$zDomain_d}\n\t\t\trDomain={$rDomain_d}\n\t\t\txRange={$xRange_d}\n\t\t\tyRange={$yRange_d}\n\t\t\tzRange={$zRange_d}\n\t\t\trRange={$rRange_d}\n\t\t\tconfig={$_config}\n\t\t\txScale={$xScale_d}\n\t\t\txGet={$xGet_d}\n\t\t\tyScale={$yScale_d}\n\t\t\tyGet={$yGet_d}\n\t\t\tzScale={$zScale_d}\n\t\t\tzGet={$zGet_d}\n\t\t\trScale={$rScale_d}\n\t\t\trGet={$rGet_d}\n\t\t/>\n\t</div>\n{/if}\n\n<style>\n\t.layercake-container,\n\t.layercake-container :global(*) {\n\t\tbox-sizing: border-box;\n\t}\n\t.layercake-container {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n</style>\n",
    "<!--\n\t@component\n\tHTML layout component\n -->\n<script>\n\timport { getContext } from 'svelte';\n\n\tconst { padding } = getContext('LayerCake');\n\n\t/** @type {Element} [element] The layer's outermost `<div>` tag. Useful for bindings. */\n\texport let element = undefined;\n\n\t/** @type {Number} [zIndex] The layer's z-index. */\n\texport let zIndex = undefined;\n\n\t/** @type {Boolean} [pointerEvents] Set this to `false` to set `pointer-events: none;` on the entire layer. */\n\texport let pointerEvents = undefined;\n\n\t/** @type {String} [role] A string passed to the `aria-role` on the `<div>` tag. This is `undefined` by default but will be set by default to `'figure'` if `label`, `labelledby` or `describedby` is set. That default will be overridden by whatever is passed in. */\n\texport let role = undefined;\n\n\t/** @type {String} [label] A string passed to the `aria-label` on the `<div>` tag. */\n\texport let label = undefined;\n\n\t/** @type {String} [labelledBy] A string passed to the `aria-labelledby` on the `<div>` tag. */\n\texport let labelledBy = undefined;\n\n\t/** @type {String} [describedBy] A string passed to `aria-describedby` property on the `<div>` tag. */\n\texport let describedBy = undefined;\n\n\t$: roleVal = role || (label || labelledBy || describedBy ? 'figure' : undefined);\n</script>\n\n<div\n\tbind:this={element}\n\tclass=\"layercake-layout-html\"\n\tstyle:z-index={zIndex}\n\tstyle:pointer-events={pointerEvents === false ? 'none' : null}\n\tstyle:top={$padding.top + 'px'}\n\tstyle:right={$padding.right + 'px'}\n\tstyle:bottom={$padding.bottom + 'px'}\n\tstyle:left={$padding.left + 'px'}\n\trole={roleVal}\n\taria-label={label}\n\taria-labelledby={labelledBy}\n\taria-describedby={describedBy}\n>\n\t<slot {element}></slot>\n</div>\n\n<style>\n\tdiv,\n\tslot {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n</style>\n",
    "<!--\n\t@component\n\tScaled SVG layout component\n -->\n<script>\n\timport { getContext } from 'svelte';\n\n\tconst { padding } = getContext('LayerCake');\n\n\t/** @type {Element} [element] The layer's `<svg>` tag. Useful for bindings. */\n\texport let element = undefined;\n\n\t/** @type {Number} [zIndex] The layer's z-index. */\n\texport let zIndex = undefined;\n\n\t/** @type {Boolean} [pointerEvents] Set this to `false` to set `pointer-events: none;` on the entire layer. */\n\texport let pointerEvents = undefined;\n\n\t/** @type {Number} [fixedAspectRatio=1`] A number to set the aspect ratio onto the viewBox. */\n\texport let fixedAspectRatio = 1;\n\n\t/** @type {String} [viewBox=`0 0 100 ${100 / fixedAspectRatio}`] A string passed to the `viewBox` property on the `<svg>` tag. */\n\texport let viewBox = `0 0 100 ${100 / fixedAspectRatio}`;\n\t$: viewBox = `0 0 100 ${100 / fixedAspectRatio}`;\n\n\t/** @type {String} [label] A string passed to the `aria-label` on the `<svg>` tag. */\n\texport let label = undefined;\n\n\t/** @type {String} [labelledBy] A string passed to the `aria-labelledby` on the `<svg>` tag. */\n\texport let labelledBy = undefined;\n\n\t/** @type {String} [describedBy] A string passed to `aria-describedby` property on the `<svg>` tag. */\n\texport let describedBy = undefined;\n\n\t/** @type {String} [title] Shorthand to set the contents of `<title></title>` for accessibility. You can also set arbitrary HTML via the \"title\" slot but this is a convenient shorthand. If you use the \"title\" slot, this prop is ignored. */\n\texport let title = undefined;\n</script>\n\n<svg\n\tbind:this={element}\n\t{viewBox}\n\tpreserveAspectRatio=\"none\"\n\tstyle:z-index={zIndex}\n\tstyle:pointer-events={pointerEvents === false ? 'none' : null}\n\tstyle:top={$padding.top + 'px'}\n\tstyle:left={$padding.left + 'px'}\n\tstyle:width={`calc(100% - ${($padding.left + $padding.right)}px)`}\n\tstyle:height={`calc(100% - ${($padding.top + $padding.bottom)}px)`}\n\tstyle=\"right:0px; bottom:0px;\"\n\taria-label={label}\n\taria-labelledby={labelledBy}\n\taria-describedby={describedBy}\n>\n\t<slot name=\"title\">{#if title}<title>{title}</title>{/if}</slot>\n\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\n\t<slot {element}></slot>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: visible;\n\t}\n\tsvg :global(*) {\n\t\tvector-effect: non-scaling-stroke;\n\t}\n</style>\n",
    "<!--\n\t@component\n\tSVG layout component\n -->\n<script>\n\timport { getContext } from 'svelte';\n\n\t/** @type {Element} [element] The layer's `<svg>` tag. Useful for bindings. */\n\texport let element = undefined;\n\n\t/** @type {Element} [innerElement] The layer's `<g>` tag. Useful for bindings. */\n\texport let innerElement = undefined;\n\n\t/** @type {Number} [zIndex] The layer's z-index. */\n\texport let zIndex = undefined;\n\n\t/** @type {Boolean} [pointerEvents] Set this to `false` to set `pointer-events: none;` on the entire layer. */\n\texport let pointerEvents = undefined;\n\n\t/** @type {String} [viewBox] A string passed to the `viewBox` property on the `<svg>` tag. */\n\texport let viewBox = undefined;\n\n\t/** @type {String} [label] A string passed to the `aria-label` property on the `<svg>` tag. */\n\texport let label = undefined;\n\n\t/** @type {String} [labelledBy] A string passed to the `aria-labelledby property` on the `<svg>` tag. */\n\texport let labelledBy = undefined;\n\n\t/** @type {String} [describedBy] A string passed to the `aria-describedby` property on the `<svg>` tag. */\n\texport let describedBy = undefined;\n\n\t/** @type {String} [title] Shorthand to set the contents of `<title></title>` for accessibility. You can also set arbitrary HTML via the \"title\" slot but this is a convenient shorthand. If you use the \"title\" slot, this prop is ignored. */\n\texport let title = undefined;\n\n\tconst { containerWidth, containerHeight, padding } = getContext('LayerCake');\n</script>\n\n<svg\n\tbind:this={element}\n\tclass=\"layercake-layout-svg\"\n\t{viewBox}\n\twidth={$containerWidth}\n\theight={$containerHeight}\n\tstyle:z-index={zIndex}\n\tstyle:pointer-events={pointerEvents === false ? 'none' : null}\n\taria-label={label}\n\taria-labelledby={labelledBy}\n\taria-describedby={describedBy}\n>\n\t<slot name=\"title\">{#if title}<title>{title}</title>{/if}</slot>\n\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\t<g\n\t\tbind:this={innerElement}\n\t\tclass=\"layercake-layout-svg_g\"\n\t\ttransform=\"translate({$padding.left}, {$padding.top})\">\n\t\t<slot {element}></slot>\n\t</g>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\toverflow: visible;\n\t}\n</style>\n",
    "<script>\n\n\timport { setContext, onMount } from \"svelte\";\n\timport { getMotion } from \"./utils.js\";\n\timport { themes } from \"./config.js\";\n\timport Header from \"./layout/Header.svelte\";\n\timport Section from \"./layout/Section.svelte\";\n\n\timport Filler from \"./layout/Filler.svelte\";\n\n\t//import Toggle from \"./ui/Toggle.svelte\"; This is currently only being implemented to toggle animations\n\timport Arrow from \"./ui/Arrow.svelte\";\n\n\timport { setColors } from \"./utils.js\";\n\n\t// The components below are used to build scrollytelling functionality, \n\t// which is a future step with this project\n\n\t// import Em from \"./ui/Em.svelte\";\n\t// import Media from \"./layout/Media.svelte\";\n\t// import Scroller from \"./layout/Scroller.svelte\"; commen\n\t// import Divider from \"./layout/Divider.svelte\";\n\n\t// CHART COMPONENTS\n\timport LineChart from \"../src/chartComponents/line-chart/LineChart.svelte\";\n\timport LineChartMini from \"../src/chartComponents/line-chart-mini/LineChart.svelte\";\n\timport Circles from \"../src/chartComponents/circle-pack/Circles.svelte\";\n\t//import Calendar from \"../src/chartComponents/calendar-chart/Calendar.svelte\"; FUTURE ADDITION\n\n\t// Set theme globally (options are 'light', 'dark' or 'lightblue') -- I'm not 100% done with the dark config\n\tlet theme = \"light\";\n\tsetContext(\"theme\", theme);\n\tsetColors(themes, theme);\n\n\t// CONFIG FOR SCROLLER COMPONENTS -- TO DO\n\t// const threshold = 0.65;\n\t// // State\n\tlet animation = getMotion(); // Set animation preference depending on browser preference\n\t// let id = {}; // Object to hold visible section IDs of Scroller components\n\t// let idPrev = {}; // Object to keep track of previous IDs, to compare for changes\n\t// onMount(() => {\n\t// \tidPrev = {...id};\n\t// });\n</script>\n\n\n<Header bgcolor=\"#003333\" bgfixed={true} theme=\"dark\" center={false} short={true}>\n\t<h1>Traffic Stops in Virginia, 2020-2023</h1>\n\t<p class=\"text-big\" style=\"margin-top: 5px\">\n\t\tWhat the community policing dataset can tell us about equity in policing\n\t</p>\n\t<p style=\"margin-top: 20px\">\n\t\tMay 13, 2024\n\t</p>\n\n\t<!-- When the scrolling component is built out with animations,\n\t\t I will include the option to toggle off the animated components. -->\n\t<!-- <p> \n\t\t<Toggle label=\"Animation {animation ? 'on' : 'off'}\" mono={true} bind:checked={animation}/>\n\t</p> -->\n\n\t<div style=\"margin-top: 90px;\">\n\t\t<Arrow color=\"white\" {animation}>Scroll to begin</Arrow>\n\t</div>\n</Header>\n\n<Filler theme=\"lightgreen\" short={true} wide={true} center={false}>\n\t<p class=\"small\">\n\t\tIn 2020, Virginia passed the Virginia Community Policing Act, which mandated the creation of a database cataloging all instances of traffic stops, stop and frisks, and detentions during traffic stops. Jurisdictions are required to contribute data to the state database. The bill established a mandated reporting system to standardize data across the state to measure “bias-based policing” in traffic stops. Per statute § 52-30.2, police are required to report: \n\t</p>\n\t<p class='text-small'>\n\t(i) the race, ethnicity, age, gender of the person stopped, and whether the person stopped spoke English; (ii) the reason for the stop; (iii) the location of the stop; (iv) whether a warning, written citation, or summons was issued or whether any person was arrested; (v) if a warning, written citation, or summons was issued or an arrest was made, the warning provided, violation charged, or crime charged; (vi) whether the vehicle or any person was searched; and (vii) whether the law-enforcement officer or State Police officer used physical force against any person and whether any person used physical force against any officers.\n\t</p>\n\t<p>\n\tAlso in the aftermath of the murder of George Floyd in 2020, Virginia passed a law prohibiting police from making traffic stops for minor infractions such as tinted windows, dangling objects in the rearview mirror, and smelling marijuana. While many of these infractions remain illegal, they cannot be the sole motivation for initiating a traffic stop. Advocates hoped this new legislation would decrease “pretextual policing,” which disproportionately affects racial and ethnic minorities.\n\t</p>\n</Filler>\n\n<div class=\"center\">\n\t<h2>Where are the traffic stops over time?</h2>\n\t<div class=\"left-text\">\n\t<p> \n\t\tThe data was collected between July 2020 and September 2023. Virginia State Police are visualized separately. These numbers represent raw counts and have not yet been normalized by jurisdiction. Jurisdiction data per locality is challenging to collect because of a lack of standardization between municipality/local government boundaries and police forces.\n\t</p>\n\t</div>\n</div>\n<div class=\"row\">\n\t<div class=\"column first-column\">\n\t\t<LineChart />\n\t</div>\n\t<div class=\"column second-column\">\n\t\t<LineChartMini />\n\t</div>\n</div>\n\n<div class=\"center\">\n\t<h2>What are the outcomes of traffic outcomes by race?</h2>\n</div>\n\t<div class=\"left-text\">\n\t<p> \n\t\tThe data for this chart was aggregated between July 2021- Sept. 2023, after police were mandated by law to report demographic information. A future iteration of this graphic will allow functionality to toggle between gender, race, age, and English speaking ability. \n\t</p>\n</div>\n<div>\n\t<Circles />\n</div>\n\n<!-- Future D3 Chart visualizing proportion of officer stops involving force by calendar date -->\n<!-- <div class=\"center\">\n\t<h2>Is there a relationship between use of force and time of year?</h2>\n\t<br>\n</div>\n<div class=\"col-wide\"><hr class=\"svelte-1l2to1w\" style=\"color: rgb(119, 119, 119);\"> \n<Section>\n\t<Calendar />\n</Section>\n</div> -->\n\n\n<style>\n\n\t.left-text {\n\t\ttext-align: justify;\n  \t\ttext-justify: inter-word;\n\t\tmargin: 0px 40px 0.5px 40px; \n\t}\n\t.row {\n\t\t\tdisplay: flex;\n\t\t}\n\n\t\t.column {\n\t\t\tflex: 1; /* Allow columns to grow and shrink */\n\t\t\tpadding: 0 10px; /* Add spacing between columns */\n\t\t}\n\n\t\t.first-column {\n\t\t\tflex: 65; /* Set the first column to occupy 70% of the width */\n\t\t}\n\n\t\t.second-column {\n\t\t\tflex: 35; /* Set the second column to occupy 30% of the width */\n\t\t}\n\t/* Styles specific to elements within the demo */\n\t:global(svelte-scroller-foreground) {\n\t\tpointer-events: none !important;\n\t}\n\t:global(svelte-scroller-foreground section div) {\n\t\tpointer-events: all !important;\n\t}\n</style>\n",
    "<script>\r\n    import { LayerCake, Svg, Html } from 'layercake';\r\n    import { scaleOrdinal, scaleBand } from 'd3-scale';\r\n\r\n    import Annotations from '../../layercake/Annotations.html.svelte';\r\n    import ForceLayout from '../../layercake/CirclePackForce.svelte';\r\n    import Key from '../../layercake/Key.html.svelte';\r\n\r\n\r\n    import data from '../circle-pack/data.json';\r\n    import flatData from '../circle-pack/flatData.json';\r\n    \r\n    const xKey = 'action_taken';\r\n    const rKey = 'counts';\r\n    const zKey = 'race';\r\n\r\n    const annotations = [\r\n    {\r\n      text: 'Arrest',\r\n      top: '300%',\r\n      left: '10%'\r\n      },\r\n    {\r\n      text: 'Citation/summons',\r\n      top: '300%',\r\n      left: '30%'\r\n      }, \r\n\r\n    {\r\n      text: 'No enforcement action',\r\n      top: '300%',\r\n      left: '55%'\r\n    }, \r\n\r\n    {\r\n      text: 'Warning',\r\n      top: '300%',\r\n      left: '87%'\r\n    }\r\n  ];\r\n\r\n    let groupBy = 'false';\r\n  \r\n    const seriesColors = ['#B5E6C2','#FF5200', '#96BFE6', '#003333', '#FFF080'];\r\n\r\n    let manyBodyStrength = 3;\r\n    let xStrength = 0.1\r\n\r\n  </script>\r\n\r\n<div class=\"wrapper\">\r\n  <label class=\"option\">\r\n    <input type=\"radio\" name=\"light\" bind:group={groupBy} value=\"false\" class=\"input\">\r\n    <div class=\"btn\">\r\n      <span class=\"span\">Clump together</span>\r\n    </div>\r\n  </label>\r\n  <label class=\"option\">\r\n    <input type=\"radio\" name=\"light\" bind:group={groupBy} value=\"true\" class=\"input\">\r\n    <div class=\"btn\">\r\n      <span class=\"span\">By action type</span>\r\n    </div>\r\n  </label>\r\n</div>\r\n  \r\n  <div class=\"chart-container\">\r\n    <LayerCake\r\n      {data}\r\n      x={xKey}\r\n      r={rKey}\r\n      z={zKey}\r\n      xScale={scaleBand()}\r\n      rRange={[10,60]}\r\n      zScale={scaleOrdinal()}\r\n      zRange={seriesColors}\r\n      flatData={flatData}\r\n\r\n    >\r\n      <Svg>\r\n            <ForceLayout\r\n            {manyBodyStrength}\r\n            {xStrength}\r\n            groupBy={JSON.parse(groupBy)}\r\n            nodeStroke='#000'\r\n            />\r\n\r\n      </Svg>\r\n\r\n      <Html\r\n      pointerEvents={false}\r\n      >\r\n      <Key \r\n          align='end'\r\n          shape='circle'\r\n        />\r\n    \r\n        {#if groupBy==='true'}\r\n        <Annotations {annotations}/>\r\n        {/if}\r\n\r\n      </Html>\r\n    </LayerCake>\r\n    \r\n  </div>\r\n\r\n  <style>\r\n    /*\r\n      The wrapper div needs to have an explicit width and height in CSS.\r\n      It can also be a flexbox child or CSS grid element.\r\n      The point being it needs dimensions since the <LayerCake> element will\r\n      expand to fill it.\r\n    */\r\n    .chart-container {\r\n      width: 150%;\r\n      height: 600px;\r\n    }\r\n    label {\r\n      cursor: pointer;\r\n    }\r\n    input {\r\n      margin-right: 7px;\r\n    }\r\n \r\n\r\n  .wrapper {\r\n  --font-color-dark: #323232;\r\n  --font-color-light: #fff;\r\n  --bg-color: #fff;\r\n  --main-color: #323232;\r\n  --secondary-color: #505050;\r\n  position: relative;\r\n  width: 250px;\r\n  height: 36px;\r\n  background-color: var(--bg-color);\r\n  border: 2px solid var(--main-color);\r\n  border-radius: 34px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  box-shadow: 2px 2px var(--main-color);\r\n}\r\n\r\n.option {\r\n  margin-right: 4px;\r\n  width: calc(50% - 3px); /* Adjusted width for two options */\r\n  height: 29px;\r\n  position: relative;\r\n  top: 2px;\r\n  left: 2px;\r\n  border-radius: 30px;\r\n  transition: 0.25s cubic-bezier(0, 0, 0, 1);\r\n  font-size: 14px\r\n  }\r\n\r\n  .option:last-child {\r\n    margin-right: 4px;\r\n  }\r\n\r\n  .option:hover {\r\n    background-color: var(--secondary-color);\r\n  }\r\n\r\n  .option:hover .span {\r\n    color: var(--font-color-light);\r\n  }\r\n\r\n  .input {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    opacity: 0; /* Hide the input */\r\n    cursor: pointer;\r\n  }\r\n\r\n  .btn {\r\n    width: 100%;\r\n    height: 100%;\r\n    border-radius: 30px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n\r\n  .span {\r\n    color: var(--font-color-dark);\r\n  }\r\n\r\n  .input:checked + .btn {\r\n    background-color: var(--main-color);\r\n    transition: 0.2s cubic-bezier(0, 0, 0, 1);\r\n  }\r\n\r\n  .input:checked + .btn .span {\r\n    color: var(--font-color-light);\r\n    transition: 0.25s cubic-bezier(0, 0, 0, 1);\r\n  }\r\n    \r\n  </style>",
    "<script>\r\n\timport * as Pancake from '@sveltejs/pancake'; \r\n\timport { agencies, years } from \"./data2.js\"; \r\n\r\n\tlet x1 = +Infinity;\r\n\tlet x2 = -Infinity\r\n\tlet y1 = +Infinity;\r\n\tlet y2 = -Infinity;\r\n\r\n\tagencies.forEach(agency => {\r\n\t\tagency.data.forEach(d => {\r\n\t\t\tif (d.x < x1) x1 = d.x;\r\n\t\t\tif (d.x > x2) x2 = d.x;\r\n\t\t\tif (d.y < y1) y1 = d.y;\r\n\t\t\tif (d.y > y2) y2 = d.y;\r\n\t\t});\r\n\t});\r\n\r\n\tlet closest;\r\n\tlet filter = 'Virginia State Police';\r\n\r\n\t$: regex = filter ? new RegExp(filter, 'i') : null;\r\n\t$: filtered = regex ? agencies.filter(agency => regex.test(agency.name)) : agencies;\r\n\r\n\t$: points = filtered.reduce((points, agency) => {\r\n\t\treturn points.concat(agency.data.map(d => ({\r\n\t\t\tx: d.x,\r\n\t\t\ty: d.y,\r\n\t\t\tagency\r\n\t\t})));\r\n\t}, []);\r\n\r\n</script>\r\n\r\n<div class=\"container\">\r\n<h2>Virginia State Police</h2>\r\n<div class=\"chart\" >\r\n\t<Pancake.Chart {x1} {x2} y1={y1} y2={y2}>\r\n\t\t<Pancake.Grid horizontal count={8} let:value>\r\n\t\t\t<div class=\"grid-line horizontal\"><span>{value}</span></div>\r\n\t\t</Pancake.Grid>\r\n\r\n\t\t<Pancake.Grid vertical count={4} let:value>\r\n\t\t\t<span class=\"x-label\">{value}</span>\r\n\t\t</Pancake.Grid>\r\n\r\n\t\t<Pancake.Svg>\r\n\t\t\t{#each filtered as agency}\r\n\t\t\t\t<Pancake.SvgLine data={agency.data} let:d>\r\n\t\t\t\t\t<path class=\"data\" {d}></path>\r\n\t\t\t\t</Pancake.SvgLine>\r\n\t\t\t{/each}\r\n\r\n\t\t\t{#if closest}\r\n\t\t\t\t<Pancake.SvgLine data={closest.agency.data} let:d>\r\n\t\t\t\t\t<path class=\"highlight\" {d}></path>\r\n\t\t\t\t</Pancake.SvgLine>\r\n\t\t\t{/if}\r\n\t\t</Pancake.Svg>\r\n\r\n\t\t{#if closest}\r\n\t\t\t<Pancake.Point x={closest.x} y={closest.y}>\r\n\t\t\t\t<span class=\"annotation-point\"></span>\r\n\t\t\t\t<div class=\"annotation\" style=\"transform: translate(-{100 * ((closest.x - x1) / (x2 - x1))}%,0)\">\r\n\t\t\t\t\t<span>{closest.x}: {closest.y} traffic stops</span>\r\n\t\t\t\t</div>\r\n\t\t\t</Pancake.Point>\r\n\t\t{/if}\r\n\r\n\t\t<Pancake.Quadtree data={points} bind:closest/>\r\n\t</Pancake.Chart>\r\n</div>\r\n</div>\r\n\r\n<style>\r\n\r\n.container {\r\n        display: flex; /* Use flexbox to align items */\r\n        flex-direction: column; /* Stack items vertically */\r\n        align-items: center; /* Center items horizontally */\r\n        margin-bottom: 20px; /* Add space between the title and the chart */\r\n    }\r\n\t.chart {\r\n\t\theight: 200px;\r\n\t\twidth: 50%;\r\n\t\tpadding: 0em 1em 2em 0em;\r\n\t\tmargin: 0 0 15px 0;\r\n\t}\r\n\r\n\t.grid-line {\r\n\t\tposition: relative;\r\n\t\tdisplay: block;\r\n\t}\r\n\r\n\t.grid-line.horizontal {\r\n\t\twidth: calc(100% + 2em);\r\n\t\tleft: -2em;\r\n\t\tborder-bottom: 1px dashed #ccc;\r\n\t}\r\n\r\n\t.grid-line span {\r\n\t\tposition: absolute;\r\n\t\tleft: 0;\r\n\t\tbottom: 2px;\r\n\t\tfont-family: sans-serif;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #999;\r\n\t}\r\n\r\n\t.x-label {\r\n\t\tposition: absolute;\r\n\t\twidth: 4em;\r\n\t\tleft: -2em;\r\n\t\tbottom: -22px;\r\n\t\tfont-family: sans-serif;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #999;\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\tpath.data {\r\n\t\tstroke: rgba(0,0,0,0.2);\r\n\t\tstroke-linejoin: round;\r\n\t\tstroke-linecap: round;\r\n\t\tstroke-width: 1px;\r\n\t\tfill: none;\r\n\t}\r\n\r\n\t.highlight {\r\n\t\tstroke: #a9c7ee;\r\n\t\tfill: none;\r\n\t\tstroke-width: 2;\r\n\t}\r\n\r\n\t.annotation {\r\n\t\tposition: absolute;\r\n\t\twhite-space: nowrap;\r\n\t\tbottom: 1em;\r\n\t\tline-height: 1.2;\r\n\t\tbackground-color: rgba(255,255,255,0.9);\r\n\t\tpadding: 0.2em 0.4em;\r\n\t\tborder-radius: 2px;\r\n\t}\r\n\r\n\t.annotation-point {\r\n\t\tposition: absolute;\r\n\t\twidth: 10px;\r\n\t\theight: 10px;\r\n\t\tbackground-color: #ff3e00;\r\n\t\tborder-radius: 50%;\r\n\t\ttransform: translate(-50%,-50%);\r\n\t}\r\n\r\n\t.annotation strong {\r\n\t\tdisplay: block;\r\n\t\tfont-size: 20px;\r\n\t}\r\n\r\n\t.annotation span {\r\n\t\tdisplay: block;\r\n\t\tfont-size: 14px;\r\n\t}\r\n\r\n\t.column {\r\n\tfloat: left;\r\n\twidth: 70%;\r\n\t}\r\n\r\n\t/* Clear floats after the columns */\r\n\t.row:after {\r\n\tcontent: \"\";\r\n\tdisplay: table;\r\n\tclear: both;\r\n}\r\n\r\nh2 { \ttext-align: center;\r\n        font-size: 14px; /* Set the font size */\r\n        margin-bottom: 5px; /* Add space between the title and the chart */\r\n    }\r\n\r\n</style>\r\n\r\n",
    "<script>\r\n\timport * as Pancake from '@sveltejs/pancake'; \r\n\timport { agencies, years } from \"./data2.js\"; \r\n\r\n\tlet x1 = +Infinity;\r\n\tlet x2 = -Infinity\r\n\tlet y1 = +Infinity;\r\n\tlet y2 = -Infinity;\r\n\r\n\tagencies.forEach(agency => {\r\n\t\tagency.data.forEach(d => {\r\n\t\t\tif (d.x < x1) x1 = d.x;\r\n\t\t\tif (d.x > x2) x2 = d.x;\r\n\t\t\tif (d.y < y1) y1 = d.y;\r\n\t\t\tif (d.y > y2) y2 = d.y;\r\n\t\t});\r\n\t});\r\n\r\n\tlet closest;\r\n\tlet filter = '';\r\n\r\n\t$: regex = filter ? new RegExp(filter, 'i') : null;\r\n\t$: filtered = regex ? agencies.filter(agency => regex.test(agency.name)) : agencies;\r\n\r\n\t$: points = filtered.reduce((points, agency) => {\r\n\t\treturn points.concat(agency.data.map(d => ({\r\n\t\t\tx: d.x,\r\n\t\t\ty: d.y,\r\n\t\t\tagency\r\n\t\t})));\r\n\t}, []);\r\n</script>\r\n\r\n<div class=\"input-container\" >\r\n<input role=\"button\" placeholder=\"Type to filter\" bind:value={filter}>\r\n</div>\r\n\r\n<div class=\"chart\" >\r\n\t<Pancake.Chart {x1} {x2} y1={y1} y2={y2}>\r\n\t\t<Pancake.Grid horizontal count={8} let:value>\r\n\t\t\t<div class=\"grid-line horizontal\"><span>{value}</span></div>\r\n\t\t</Pancake.Grid>\r\n\r\n\t\t<Pancake.Grid vertical count={4} let:value>\r\n\t\t\t<span class=\"x-label\">{value === 2020 ? `June-Dec. ${value}` : value === 2023 ? `Jan.-Sept. ${value}` : value}</span>\r\n\t\t</Pancake.Grid>\r\n\r\n\t\t<Pancake.Svg>\r\n\t\t\t{#each filtered as agency}\r\n\t\t\t\t<Pancake.SvgLine data={agency.data} let:d>\r\n\t\t\t\t\t<path class=\"data\" {d}></path>\r\n\t\t\t\t</Pancake.SvgLine>\r\n\t\t\t{/each}\r\n\r\n\t\t\t{#if closest}\r\n\t\t\t\t<Pancake.SvgLine data={closest.agency.data} let:d>\r\n\t\t\t\t\t<path class=\"highlight\" {d}></path>\r\n\t\t\t\t</Pancake.SvgLine>\r\n\t\t\t{/if}\r\n\t\t</Pancake.Svg>\r\n\r\n\t\t{#if closest}\r\n\t\t\t<Pancake.Point x={closest.x} y={closest.y}>\r\n\t\t\t\t<span class=\"annotation-point\"></span>\r\n\t\t\t\t<div class=\"annotation\" style=\"transform: translate(-{100 * ((closest.x - x1) / (x2 - x1))}%,0)\">\r\n\t\t\t\t\t<strong>{closest.agency.name}</strong>\r\n\t\t\t\t\t<span>{closest.x}: {closest.y} traffic stops</span>\r\n\t\t\t\t</div>\r\n\t\t\t</Pancake.Point>\r\n\t\t{/if}\r\n\r\n\t\t<Pancake.Quadtree data={points} bind:closest/>\r\n\t</Pancake.Chart>\r\n</div>\r\n\r\n\r\n<style>\r\n\t.input-container {\r\n\t\tpadding: 2em 0 0em 2em;\r\n\t\tmargin: 0 0 0px 0;\r\n\t}\r\n\r\n\t.chart {\r\n\t\theight: 500px;\r\n\t\tpadding: 2em 0 2em 4em;\r\n\t\tmargin: 0 0 36px 0;\r\n\t}\r\n\r\n\tinput {\r\n\t\tpadding: 2em 0 2em 4em;\r\n\t\tfont-size: inherit;\r\n\t\tfont-family: inherit;\r\n\t\tpadding: 0.5em;\r\n\t}\r\n\r\n\t.grid-line {\r\n\t\tposition: relative;\r\n\t\tdisplay: block;\r\n\t}\r\n\r\n\t.grid-line.horizontal {\r\n\t\twidth: calc(100% + 2em);\r\n\t\tleft: -2em;\r\n\t\tborder-bottom: 1px dashed #ccc;\r\n\t}\r\n\r\n\t.grid-line span {\r\n\t\tposition: absolute;\r\n\t\tleft: 0;\r\n\t\tbottom: 2px;\r\n\t\tfont-family: sans-serif;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #999;\r\n\t}\r\n\r\n\t.x-label {\r\n\t\tposition: absolute;\r\n\t\twidth: 4em;\r\n\t\tleft: -2em;\r\n\t\tbottom: -25px;\r\n\t\tfont-family: sans-serif;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #999;\r\n\t\ttext-align: center;\r\n\t\twhite-space: nowrap;\r\n\t}\r\n\r\n\tpath.data {\r\n\t\tstroke: rgba(0,0,0,0.2);\r\n\t\tstroke-linejoin: round;\r\n\t\tstroke-linecap: round;\r\n\t\tstroke-width: 1px;\r\n\t\tfill: none;\r\n\t}\r\n\r\n\t.highlight {\r\n\t\tstroke: #a9c7ee;\r\n\t\tfill: none;\r\n\t\tstroke-width: 2;\r\n\t}\r\n\r\n\t.annotation {\r\n\t\tposition: absolute;\r\n\t\twhite-space: nowrap;\r\n\t\tbottom: 1em;\r\n\t\tline-height: 1.2;\r\n\t\tbackground-color: rgba(255,255,255,0.9);\r\n\t\tpadding: 0.2em 0.4em;\r\n\t\tborder-radius: 2px;\r\n\t}\r\n\r\n\t.annotation-point {\r\n\t\tposition: absolute;\r\n\t\twidth: 10px;\r\n\t\theight: 10px;\r\n\t\tbackground-color: #ff3e00;\r\n\t\tborder-radius: 50%;\r\n\t\ttransform: translate(-50%,-50%);\r\n\t}\r\n\r\n\t.annotation strong {\r\n\t\tdisplay: block;\r\n\t\tfont-size: 20px;\r\n\t}\r\n\r\n\t.annotation span {\r\n\t\tdisplay: block;\r\n\t\tfont-size: 14px;\r\n\t}\r\n\r\n\t.column {\r\n\tfloat: left;\r\n\twidth: 70%;\r\n\t}\r\n\r\n\t/* Clear floats after the columns */\r\n\t.row:after {\r\n\tcontent: \"\";\r\n\tdisplay: table;\r\n\tclear: both;\r\n}\r\n\r\n</style>\r\n\r\n",
    "<!--\r\n  @component\r\n  Adds text annotations based on a config object that has CSS styles as fields.\r\n -->\r\n <script>\r\n    const vals = ['top', 'right', 'bottom', 'left'];\r\n \r\n    /** @type {Array} annotations - A list of annotation objects. It expects values of `top`, `right`, `bottom` and `left` whose values are CSS values like `'10px'` or `'5%'` that will be used to absolutely position the text div. See the [Column](https://layercake.graphics/example/Column) chart example for the schema and options. */\r\n    export let annotations = [];\r\n \r\n    /** @type {Function} [getText=d => d.text] - An accessor function to get the field to display. */\r\n   export let getText = d => d.text;\r\n \r\n   $: fillStyle = d => {\r\n     let style = '';\r\n     vals.forEach(val => {\r\n       if (d[val]) {\r\n         style += `${val}:${d[val]};`;\r\n       }\r\n     });\r\n     return style;\r\n   };\r\n </script>\r\n \r\n <div class=\"layercake-annotations\">\r\n   {#each annotations as d, i}\r\n     <div\r\n       class=\"layercake-annotation\"\r\n       data-id=\"{i}\"\r\n       style=\"{fillStyle(d)}\"\r\n     >{getText(d)}</div>\r\n   {/each}\r\n </div>\r\n \r\n <style>\r\n   .layercake-annotation {\r\n     position: absolute;\r\n   }\r\n </style>",
    "<!--\r\n  @component\r\n  Creates a key for ordinal scales on `zScale`.\r\n -->\r\n <script>\r\n    import { getContext } from 'svelte';\r\n  \r\n    /** @type {String} [shape='square'] - The shape for each item. Can be 'circle', 'line', or 'square'; */\r\n    export let shape = 'square';\r\n  \r\n    /** @type {String} [align='start'] - Sets the CSS flexbox justify-content setting for the box as a whole. Can be 'start', 'center' or 'end'. */\r\n    export let align = 'start';\r\n  \r\n    /** @type {Function|Object} [lookup] - Either a function that takes the value and returns a formatted string, or an object of values. If a given value is not present in a lookup object, it returns the original value. */\r\n    export let lookup = undefined;\r\n  \r\n    /** @type {Boolean} [capitalize=true] - Capitalize the first character. */\r\n    export let capitalize = true;\r\n  \r\n    const { zDomain, zScale } = getContext('LayerCake');\r\n  \r\n    function cap (val) {\r\n      return String(val).replace(/^\\w/, d => d.toUpperCase());\r\n    }\r\n  \r\n    function displayName (val) {\r\n      if (lookup) {\r\n        return typeof lookup === 'function' ? lookup(val) : (lookup[val] || val);\r\n      }\r\n      return capitalize === true ? cap(val) : val;\r\n    }\r\n  </script>\r\n  \r\n  <style>\r\n    .key {\r\n      display: flex;\r\n    }\r\n    .key-item {\r\n      margin-right: 14px;\r\n    }\r\n    .chip {\r\n      display: inline-block;\r\n      position: relative;\r\n      width: 12px;\r\n      height: 12px;\r\n    }\r\n    .chip__circle {\r\n      border-radius: 50%;\r\n    }\r\n    .chip__line:after {\r\n      content: '';\r\n      position: absolute;\r\n      border-width: 3px;\r\n      width: 14px;\r\n      transform: rotate(-45deg);\r\n      transform-origin: 14px 5px;\r\n    }\r\n    .name {\r\n      display: inline;\r\n      font-size: 12px;\r\n      text-shadow: -1px -1px 0 #fff, 1px -1px 0 #fff, -1px 1px 0 #fff, 1px 1px 0 #fff;\r\n    }\r\n  </style>\r\n  \r\n  <div class='key' style=\"justify-content: {align === 'end' ? 'flex-end': align};\">\r\n    {#each $zDomain as item}\r\n      <div class='key-item'>\r\n        <div\r\n          class='chip chip__{shape}'\r\n          style='background: {\r\n            shape === `line` ?\r\n            `linear-gradient(-45deg, #ffffff 40%, ${$zScale(item)} 41%, ${$zScale(item)} 59%, #ffffff 60%)`\r\n            : $zScale(item)};'\r\n        ></div>\r\n        <div class='name'>{displayName(item)}</div>\r\n      </div>\r\n    {/each}\r\n  </div>",
    "<script>\n\timport { themes } from '../config.js';\n\timport { getContext } from 'svelte';\n\n\texport let theme = getContext('theme');\n\texport let center = true;\n\texport let wide = false;\n\texport let short = false;\n</script>\n\n<style>\n\tsection {\n\t\tpadding: 36px 0;\n\t}\n\t.short {\n\t\tmin-height: 70vh;\n\t}\n</style>\n\n<section style=\"color: {themes[theme]['text']}; background-color: {themes[theme]['background']};\">\n\t<div class=\"middle\" class:center class:col-medium={!wide} class:col-wide={wide} class:height-full={!short} class:short>\n\t\t<slot></slot>\n\t</div>\n</section>",
    "<script>\n  import { themes } from '../config.js';\n\timport { getContext } from 'svelte';\n\n\texport let theme = getContext('theme');\n  export let bgimage = null;\n  export let bgcolor = null;\n  export let bgfixed = false;\n  export let center = true;\n  export let short = false;\n\n  let style = '';\n\n  if (bgimage) {\n    style += `background-image: url(${bgimage});`;\n  } else {\n    style += 'background-image: none;';\n  }\n\n  if (bgfixed) {\n    style += ' background-attachment: fixed;';\n  }\n</script>\n\n<style>\n  .short {\n    min-height: 85vh;\n  }\n  .v-padded {\n    box-sizing: border-box;\n    padding: 40px 0;\n  }\n</style>\n\n<header style=\"color: {themes[theme]['text']}; background-color: {bgcolor ? bgcolor : themes[theme]['background']}; {style}\" class:short>\n\t<div class=\"v-padded col-wide middle\" style=\"position: relative\" class:short class:height-full={!short}>\n\t\t<div class:center>\n\t\t\t<slot></slot>\n    </div>\n\t</div>\n</header>",
    "<script>\n  export let color = \"black\";\n  export let animation = true;\n\texport let center = true;\n\n  const colors = [\"black\", \"white\"];\n\n  color = colors.includes(color) ? color : \"black\";\n</script>\n\n{#if center}\n<slot></slot><br/>\n<img src=\"./img/scroll-down-{color}.svg\" class=\"arrow\" class:bounce={animation} alt=\"\" aria-hidden=\"true\"/>\n{:else}\n<img src=\"./img/scroll-down-{color}.svg\" class=\"arrow left\" class:bounce={animation} alt=\"\" aria-hidden=\"true\"/><slot></slot>\n{/if}\n\n<style>\n\t.arrow {\n\t\twidth: 48px;\n\t\theight: 48px;\n\t}\n\t.left {\n\t\tmargin-right: 10px;\n\t}\n\t.bounce {\n\t\t-webkit-animation-duration: 2s;\n\t\t        animation-duration: 2s;\n\t\t-webkit-animation-iteration-count: infinite;\n\t\t        animation-iteration-count: infinite;\n\t\t-webkit-animation-name: bounce;\n\t\t        animation-name: bounce;\n\t\t-webkit-animation-timing-function: ease;\n\t\t        animation-timing-function: ease;\n\t}\n\t@-webkit-keyframes bounce {\n\t\t0%   { -webkit-transform: translateY(10px); transform: translateY(10px); }\n\t\t30%  { -webkit-transform: translateY(-10px); transform: translateY(-10px); }\n\t\t50%  { -webkit-transform: translateY(10px); transform: translateY(10px); }\n\t\t100% { -webkit-transform: translateY(10px); transform: translateY(10px); }\n\t}\n\t@keyframes bounce {\n\t\t0%   { -webkit-transform: translateY(10px); transform: translateY(10px); }\n\t\t30%  { -webkit-transform: translateY(-10px); transform: translateY(-10px); }\n\t\t50%  { -webkit-transform: translateY(10px); transform: translateY(10px); }\n\t\t100% { -webkit-transform: translateY(10px); transform: translateY(10px); }\n\t}\n</style>"
  ],
  "names": [],
  "mappings": "AAiCC,YAAY,cAAC,CAAC,AACb,QAAQ,CAAE,QAAQ,AACnB,CAAC;ACwDD,cAAc,eAAC,CAAC,AACf,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACb,CAAC,AAED,KAAK,eAAC,CAAC,AACN,QAAQ,CAAE,MAAM,AACjB,CAAC;AC9DD,kBAAkB,eAAC,CAAC,AACnB,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,AACP,CAAC;AC5BD,cAAc,eAAC,CAAC,AACf,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,AACV,CAAC;ACTD,GAAG,cAAC,CAAC,AACJ,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,OAAO,AAClB,CAAC,AAED,KAAK,cAAC,CAAC,AACN,QAAQ,CAAE,MAAM,AACjB,CAAC,AAED,iBAAG,CAAC,AAAQ,CAAC,AAAE,CAAC,AACf,aAAa,CAAE,kBAAkB,AAClC,CAAC;AC8hBD,kCAAoB,CACpB,kCAAoB,CAAC,AAAQ,CAAC,AAAE,CAAC,AAChC,UAAU,CAAE,UAAU,AACvB,CAAC,AACD,oBAAoB,cAAC,CAAC,AACrB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACb,CAAC;ACxgBD,kBAAG,CACH,IAAI,eAAC,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,AACR,CAAC;ACOD,GAAG,cAAC,CAAC,AACJ,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,OAAO,AAClB,CAAC,AACD,iBAAG,CAAC,AAAQ,CAAC,AAAE,CAAC,AACf,aAAa,CAAE,kBAAkB,AAClC,CAAC;ACRD,GAAG,cAAC,CAAC,AACJ,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,QAAQ,CAAE,OAAO,AAClB,CAAC;ACqDD,UAAU,cAAC,CAAC,AACX,UAAU,CAAE,OAAO,CACjB,YAAY,CAAE,UAAU,CAC1B,MAAM,CAAE,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,AAC5B,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,AACd,CAAC,AAED,OAAO,cAAC,CAAC,AACR,IAAI,CAAE,CAAC,CACP,OAAO,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AAED,aAAa,cAAC,CAAC,AACd,IAAI,CAAE,EAAE,AACT,CAAC,AAED,cAAc,cAAC,CAAC,AACf,IAAI,CAAE,EAAE,AACT,CAAC,AAEM,0BAA0B,AAAE,CAAC,AACpC,cAAc,CAAE,IAAI,CAAC,UAAU,AAChC,CAAC,AACO,sCAAsC,AAAE,CAAC,AAChD,cAAc,CAAE,GAAG,CAAC,UAAU,AAC/B,CAAC;ACpCE,gBAAgB,4BAAC,CAAC,AAChB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,AACf,CAAC,AACD,KAAK,4BAAC,CAAC,AACL,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,KAAK,4BAAC,CAAC,AACL,YAAY,CAAE,GAAG,AACnB,CAAC,AAGH,QAAQ,4BAAC,CAAC,AACV,iBAAiB,CAAE,OAAO,CAC1B,kBAAkB,CAAE,IAAI,CACxB,UAAU,CAAE,IAAI,CAChB,YAAY,CAAE,OAAO,CACrB,iBAAiB,CAAE,OAAO,CAC1B,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,IAAI,UAAU,CAAC,CACjC,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,YAAY,CAAC,CACnC,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,IAAI,YAAY,CAAC,AACvC,CAAC,AAED,OAAO,4BAAC,CAAC,AACP,YAAY,CAAE,GAAG,CACjB,KAAK,CAAE,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CACtB,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAC1C,SAAS,CAAE,IAAI;EACf,CAAC,AAED,mCAAO,WAAW,AAAC,CAAC,AAClB,YAAY,CAAE,GAAG,AACnB,CAAC,AAED,mCAAO,MAAM,AAAC,CAAC,AACb,gBAAgB,CAAE,IAAI,iBAAiB,CAAC,AAC1C,CAAC,AAED,qBAAO,MAAM,CAAC,KAAK,cAAC,CAAC,AACnB,KAAK,CAAE,IAAI,kBAAkB,CAAC,AAChC,CAAC,AAED,MAAM,4BAAC,CAAC,AACN,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,CACN,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,IAAI,4BAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,KAAK,4BAAC,CAAC,AACL,KAAK,CAAE,IAAI,iBAAiB,CAAC,AAC/B,CAAC,AAED,oBAAM,QAAQ,CAAG,IAAI,cAAC,CAAC,AACrB,gBAAgB,CAAE,IAAI,YAAY,CAAC,CACnC,UAAU,CAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,AAC3C,CAAC,AAED,MAAM,QAAQ,CAAG,kBAAI,CAAC,KAAK,cAAC,CAAC,AAC3B,KAAK,CAAE,IAAI,kBAAkB,CAAC,CAC9B,UAAU,CAAE,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,AAC5C,CAAC;ACxHH,UAAU,4BAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,aAAa,CAAE,IAAI,AACvB,CAAC,AACJ,MAAM,4BAAC,CAAC,AACP,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,GAAG,CACV,OAAO,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CACxB,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,AACnB,CAAC,AAED,UAAU,4BAAC,CAAC,AACX,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,KAAK,AACf,CAAC,AAED,UAAU,WAAW,4BAAC,CAAC,AACtB,KAAK,CAAE,KAAK,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CACvB,IAAI,CAAE,IAAI,CACV,aAAa,CAAE,GAAG,CAAC,MAAM,CAAC,IAAI,AAC/B,CAAC,AAED,wBAAU,CAAC,IAAI,cAAC,CAAC,AAChB,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,MAAM,CAAE,GAAG,CACX,WAAW,CAAE,UAAU,CACvB,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,AACZ,CAAC,AAED,QAAQ,4BAAC,CAAC,AACT,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,GAAG,CACV,IAAI,CAAE,IAAI,CACV,MAAM,CAAE,KAAK,CACb,WAAW,CAAE,UAAU,CACvB,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,AACnB,CAAC,AAED,IAAI,KAAK,4BAAC,CAAC,AACV,MAAM,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACvB,eAAe,CAAE,KAAK,CACtB,cAAc,CAAE,KAAK,CACrB,YAAY,CAAE,GAAG,CACjB,IAAI,CAAE,IAAI,AACX,CAAC,AAED,UAAU,4BAAC,CAAC,AACX,MAAM,CAAE,OAAO,CACf,IAAI,CAAE,IAAI,CACV,YAAY,CAAE,CAAC,AAChB,CAAC,AAED,WAAW,4BAAC,CAAC,AACZ,QAAQ,CAAE,QAAQ,CAClB,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,GAAG,CACX,WAAW,CAAE,GAAG,CAChB,gBAAgB,CAAE,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CACvC,OAAO,CAAE,KAAK,CAAC,KAAK,CACpB,aAAa,CAAE,GAAG,AACnB,CAAC,AAED,iBAAiB,4BAAC,CAAC,AAClB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,OAAO,CACzB,aAAa,CAAE,GAAG,CAClB,SAAS,CAAE,UAAU,IAAI,CAAC,IAAI,CAAC,AAChC,CAAC,AAOD,yBAAW,CAAC,IAAI,cAAC,CAAC,AACjB,OAAO,CAAE,KAAK,CACd,SAAS,CAAE,IAAI,AAChB,CAAC,AAcF,EAAE,4BAAC,CAAC,AAAE,UAAU,CAAE,MAAM,CAChB,SAAS,CAAE,IAAI,CACf,aAAa,CAAE,GAAG,AACtB,CAAC;ACrGJ,gBAAgB,8BAAC,CAAC,AACjB,OAAO,CAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CACtB,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,AAClB,CAAC,AAED,MAAM,8BAAC,CAAC,AACP,MAAM,CAAE,KAAK,CACb,OAAO,CAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CACtB,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,AACnB,CAAC,AAED,KAAK,8BAAC,CAAC,AACN,OAAO,CAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CACtB,SAAS,CAAE,OAAO,CAClB,WAAW,CAAE,OAAO,CACpB,OAAO,CAAE,KAAK,AACf,CAAC,AAED,UAAU,8BAAC,CAAC,AACX,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,KAAK,AACf,CAAC,AAED,UAAU,WAAW,8BAAC,CAAC,AACtB,KAAK,CAAE,KAAK,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CACvB,IAAI,CAAE,IAAI,CACV,aAAa,CAAE,GAAG,CAAC,MAAM,CAAC,IAAI,AAC/B,CAAC,AAED,yBAAU,CAAC,IAAI,eAAC,CAAC,AAChB,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,MAAM,CAAE,GAAG,CACX,WAAW,CAAE,UAAU,CACvB,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,AACZ,CAAC,AAED,QAAQ,8BAAC,CAAC,AACT,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,GAAG,CACV,IAAI,CAAE,IAAI,CACV,MAAM,CAAE,KAAK,CACb,WAAW,CAAE,UAAU,CACvB,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,CAClB,WAAW,CAAE,MAAM,AACpB,CAAC,AAED,IAAI,KAAK,8BAAC,CAAC,AACV,MAAM,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACvB,eAAe,CAAE,KAAK,CACtB,cAAc,CAAE,KAAK,CACrB,YAAY,CAAE,GAAG,CACjB,IAAI,CAAE,IAAI,AACX,CAAC,AAED,UAAU,8BAAC,CAAC,AACX,MAAM,CAAE,OAAO,CACf,IAAI,CAAE,IAAI,CACV,YAAY,CAAE,CAAC,AAChB,CAAC,AAED,WAAW,8BAAC,CAAC,AACZ,QAAQ,CAAE,QAAQ,CAClB,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,GAAG,CACX,WAAW,CAAE,GAAG,CAChB,gBAAgB,CAAE,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CACvC,OAAO,CAAE,KAAK,CAAC,KAAK,CACpB,aAAa,CAAE,GAAG,AACnB,CAAC,AAED,iBAAiB,8BAAC,CAAC,AAClB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,OAAO,CACzB,aAAa,CAAE,GAAG,CAClB,SAAS,CAAE,UAAU,IAAI,CAAC,IAAI,CAAC,AAChC,CAAC,AAED,0BAAW,CAAC,MAAM,eAAC,CAAC,AACnB,OAAO,CAAE,KAAK,CACd,SAAS,CAAE,IAAI,AAChB,CAAC,AAED,0BAAW,CAAC,IAAI,eAAC,CAAC,AACjB,OAAO,CAAE,KAAK,CACd,SAAS,CAAE,IAAI,AAChB,CAAC;ACrIC,qBAAqB,cAAC,CAAC,AACrB,QAAQ,CAAE,QAAQ,AACpB,CAAC;ACHA,IAAI,eAAC,CAAC,AACJ,OAAO,CAAE,IAAI,AACf,CAAC,AACD,SAAS,eAAC,CAAC,AACT,YAAY,CAAE,IAAI,AACpB,CAAC,AACD,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,YAAY,CACrB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC,AACD,aAAa,eAAC,CAAC,AACb,aAAa,CAAE,GAAG,AACpB,CAAC,AACD,0BAAW,MAAM,AAAC,CAAC,AACjB,OAAO,CAAE,EAAE,CACX,QAAQ,CAAE,QAAQ,CAClB,YAAY,CAAE,GAAG,CACjB,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,OAAO,MAAM,CAAC,CACzB,gBAAgB,CAAE,IAAI,CAAC,GAAG,AAC5B,CAAC,AACD,KAAK,eAAC,CAAC,AACL,OAAO,CAAE,MAAM,CACf,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,AACjF,CAAC;AClDJ,OAAO,eAAC,CAAC,AACR,OAAO,CAAE,IAAI,CAAC,CAAC,AAChB,CAAC,AACD,MAAM,eAAC,CAAC,AACP,UAAU,CAAE,IAAI,AACjB,CAAC;ACSA,MAAM,eAAC,CAAC,AACN,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,SAAS,eAAC,CAAC,AACT,UAAU,CAAE,UAAU,CACtB,OAAO,CAAE,IAAI,CAAC,CAAC,AACjB,CAAC;ACbF,MAAM,eAAC,CAAC,AACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACb,CAAC,AACD,KAAK,eAAC,CAAC,AACN,YAAY,CAAE,IAAI,AACnB,CAAC,AACD,OAAO,eAAC,CAAC,AACR,0BAA0B,CAAE,EAAE,CACtB,kBAAkB,CAAE,EAAE,CAC9B,iCAAiC,CAAE,QAAQ,CACnC,yBAAyB,CAAE,QAAQ,CAC3C,sBAAsB,CAAE,qBAAM,CACtB,cAAc,CAAE,qBAAM,CAC9B,iCAAiC,CAAE,IAAI,CAC/B,yBAAyB,CAAE,IAAI,AACxC,CAAC,AACD,mBAAmB,qBAAO,CAAC,AAC1B,EAAE,AAAG,CAAC,AAAC,iBAAiB,CAAE,WAAW,IAAI,CAAC,CAAE,SAAS,CAAE,WAAW,IAAI,CAAC,AAAE,CAAC,AAC1E,GAAG,AAAE,CAAC,AAAC,iBAAiB,CAAE,WAAW,KAAK,CAAC,CAAE,SAAS,CAAE,WAAW,KAAK,CAAC,AAAE,CAAC,AAC5E,GAAG,AAAE,CAAC,AAAC,iBAAiB,CAAE,WAAW,IAAI,CAAC,CAAE,SAAS,CAAE,WAAW,IAAI,CAAC,AAAE,CAAC,AAC1E,IAAI,AAAC,CAAC,AAAC,iBAAiB,CAAE,WAAW,IAAI,CAAC,CAAE,SAAS,CAAE,WAAW,IAAI,CAAC,AAAE,CAAC,AAC3E,CAAC,AACD,WAAW,qBAAO,CAAC,AAClB,EAAE,AAAG,CAAC,AAAC,iBAAiB,CAAE,WAAW,IAAI,CAAC,CAAE,SAAS,CAAE,WAAW,IAAI,CAAC,AAAE,CAAC,AAC1E,GAAG,AAAE,CAAC,AAAC,iBAAiB,CAAE,WAAW,KAAK,CAAC,CAAE,SAAS,CAAE,WAAW,KAAK,CAAC,AAAE,CAAC,AAC5E,GAAG,AAAE,CAAC,AAAC,iBAAiB,CAAE,WAAW,IAAI,CAAC,CAAE,SAAS,CAAE,WAAW,IAAI,CAAC,AAAE,CAAC,AAC1E,IAAI,AAAC,CAAC,AAAC,iBAAiB,CAAE,WAAW,IAAI,CAAC,CAAE,SAAS,CAAE,WAAW,IAAI,CAAC,AAAE,CAAC,AAC3E,CAAC"
}